<!DOCTYPE html>
<html>
<head>
    <link href='style.css' rel='stylesheet' type='text/css' />
    <!--link rel="stylesheet" href="css/style.css"-->
    <link href='https://fonts.googleapis.com/css?family=Lato' rel='stylesheet' type='text/css'>
    <script src="<%=ResolveUrl("~/JS/jquery-3.1.0.js")"%>" type='text/javascript'></script>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script type="text/javascript">
        function upload() {
            alert("upload");
            var file_data = $('#file').get(0).files;
            alert(file_data[0].name);
            var formData = new FormData();
            if (file_data.length > 0) {
                formData.append('UploadedFiles', file_data[0], file_data[0].name);
            }
            /*var xhr = new XMLHttpRequest();
            xhr.open('POST', '/Chord/GetFile', false);
            xhr.setRequestHeader("Content-Type", false);
            xhr.send(data);*/
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetFile")',
                contentType: false,
                data: formData,
                dataType: 'text',
                encode: true,
                async: false,
                processData: false,
                cache: false,
                success: function (res) {
                    alert(res);
                }
            });
        }
        function getFile() {
            alert("getFile");
            document.getElementById("file").click();
            /*document.getElementById("file_form").onsubmit = function () {
                upload();
            }*/
        }

        function submitFile() {
            alert("submitFile");
            upload();
        }
    </script>
</head>
<body>
    <div class="UL">
        <a href="/"><img src="" /></a>
    </div>
    <div class="nav-top">
        <ul>
            <li>README</li>
            <li>SUPPORT</li>
        </ul>
    </div>
    <div class="clearfix">
    </div>
    <div class="banner">
        <h1>Mr. Chorder</h1>
        <h2>Musical Score Transcribe</h2>
        <div id="logo">
            <img src="/Images/Logo.png" />
        </div>
        <div class="wave">
            <div id="container-classic" class="wave-content">
            </div>
        </div>
        <div id="submit"  onclick="getFile()">
            <a class="file">
                UPLOAD
                <form id="file_form" method="post" onsubmit="upload()" data-ajax="true" enctype="multipart/form-data">
                    <input type="file" name="file" id="file" onchange="submitFile()"/>
                    <input type="submit" id="submitf" value=""/>
                </form>
            </a>
        </div>
    </div>
    <div class="clearfix">
    </div>
    <div id="line"></div>
    <div class="body">
        <div id="result">
        </div>
    </div>
    <div class="footer">
        <p> Created by Mr. Chorder Team. </p>
    </div>
    <script>
        function SiriWave(opt) {
            this.opt = opt || {};

            this.K = 2;
            this.F = 6;
            this.speed = 0.1;
            this.noise = 0.1;
            this.phase = 0.3;

            this.dpr = window.devicePixelRatio;
            if (!this.dpr) this.dpr = 1;
            this.width = this.dpr * (this.opt.width || 320);
            this.height = this.dpr * (this.opt.height || 100);
            this.MAX = (this.height / 2) - 4;

            this.canvas = document.createElement('canvas');
            this.canvas.width = this.width;
            this.canvas.height = this.height;
            this.canvas.style.width = (this.width / this.dpr) + 'px';
            this.canvas.style.height = (this.height / this.dpr) + 'px';
            (this.opt.container || document.body).appendChild(this.canvas);
            this.ctx = this.canvas.getContext('2d');

            this.run = false;
        }

        SiriWave.prototype = {

            _globalAttenuationFn: function (x) {
                return Math.pow(this.K * 4 / (this.K * 4 + Math.pow(x, 4)), this.K * 2);
            },

            _drawLine: function (attenuation, color, width, phase, freq) {

                this.ctx.moveTo(0, 0);
                this.ctx.beginPath();
                this.ctx.strokeStyle = color;
                this.ctx.lineWidth = width || (1.5 * this.dpr);
                var x, y;
                for (var i = -this.K; i <= this.K; i += 0.01) {
                    x = this.width * ((i + this.K) / (this.K * 2));
                    y = this.height / 2 + this.noise * this._globalAttenuationFn(i) * (1 / attenuation) * Math.sin((this.F * freq) * i - (this.phase + phase));
                    this.ctx.lineTo(x, y);
                }
                this.ctx.stroke();
            },

            _clear: function () {
                this.ctx.globalCompositeOperation = 'destination-out';
                this.ctx.fillRect(0, 0, this.width, this.height);
                this.ctx.globalCompositeOperation = 'source-over';
            },

            _draw: function () {
                if (!this.run) return;

                this.phase = (this.phase + this.speed) % (Math.PI * 64);
                this._clear();
                this._drawLine(-2, 'rgba(255, 128, 255,0.1)', 0, 2.0, 1.05);
                this._drawLine(-6, 'rgba(255, 128, 255,0.2)', 0, 1.0, 0.95);
                this._drawLine(4, 'rgba(255, 128, 255,0.4)', 0, 0.35, 1.2);
                this._drawLine(2, 'rgba(255, 128, 255,0.6)', 0, 0.25, 0.8);
                this._drawLine(1, 'rgba(255, 128, 255,1)', 1.5, 0.0, 1.0);
                this._drawLine(-3, 'rgba(255, 128, 255,0.2)', 1.5, 0.5, 0.5);

                requestAnimationFrame(this._draw.bind(this), 1000);
            },

            start: function () {
                if (this.run == true) {
                    return;
                }
                this.phase = 0;
                this.run = true;
                this._draw();
            },

            stop: function () {
                //this.speed = 0;
                this.phase = 0;
                //this.noise = 0;
                this.run = false;
            },

            setNoise: function (v) {
                this.noise = Math.min(v, 1) * this.MAX;
            },

            setSpeed: function (v) {
                this.speed = v;
            },

            set: function (noise, speed) {
                this.setNoise(noise);
                this.setSpeed(speed);
            }

        };
        var SW = new SiriWave({
            container: document.getElementById('container-classic'),
            width: 964,
            height: 100
        });
        SW.setSpeed(-0.1);
        SW.setNoise(1.4);
        SW.F = 2.5;
        SW.start();
    </script>
</body>
</html>
